#!/bin/bash

# Source prompt colors/symbols
if [ -f ~/.dotfiles/_promptcolors ];then
	. ~/.dotfiles/_promptcolors
fi

git_prompt() {

hash git 2>/dev/null || return # git not found

local git_eng="env LANG=C git"   # force git output in English to make our work easier

# get current branch name
local ref=$($git_eng symbolic-ref --short HEAD 2>/dev/null)

# Check if branch or use tag/SHA
if [[ -n "$ref" ]]; then
	# prepend branch symbol
	ref="$SYMBOL_GIT_BRANCH $ref"
else
  # get tag name or short unique hash
	ref=$($git_eng describe --tags --always 2>/dev/null)
fi

[[ -n "$ref" ]] || return  # not a git repo


local marks

# scan first two lines of output from `git status`
while IFS= read -r line; do
	if [[ $line =~ ^'##' ]]; then # header line
		[[ $line =~ ahead\ ([0-9]+) ]] && marks+=" $SYMBOL_GIT_PUSH${BASH_REMATCH[1]}"
		[[ $line =~ behind\ ([0-9]+) ]] && marks+=" $SYMBOL_GIT_PULL${BASH_REMATCH[1]}"
	else # branch is modified if output contains more lines after the header line
		marks=" $SYMBOL_GIT_MODIFIED$marks"
		break
	fi

done < <($git_eng status --porcelain --branch 2>/dev/null)  # note the space between the two <

# print the git branch segment without a trailing newline
printf " [ $ref$marks ] "
}

git_prompt2() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi;

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;

		fi;

		# Get the short symbolic ref.
		# If HEAD isn't a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s=" ${s}";

		echo -e "[ ${1}${branchName}${2}${s} ]";
	else
		return;
	fi;
}
