#!/bin/sh

# Source prompt colors/symbols
if [ -f "$HOME/.dotfiles/posixshells/sh_prompt/prompt_git_function" ];then
  . "$HOME/.dotfiles/posixshells/sh_prompt/prompt_git_function"
fi

# Wrap the prompt command settings in funciton rather than directly assigning,
# wider compatibility with OSX Terminal (vs directly assigning PS1)
##ref: https://github.com/riobard/bash-powerline/issues/14#issuecomment-311846617
__ps1_prompt_command() {
  # DEFINE: Last Exit code: set color of prompt symbol (based on last exit code)
  PS1_PrevCmdExitCode=$?
  if [ "$PS1_PrevCmdExitCode" -eq 0 ]; then
    SHELL_SYMBOL=$(printf '%s%s%s' "$C_SUCCESS" "$PS_SYMBOL" "$RESET")
  else
    SHELL_SYMBOL=$(printf '%s%s%s' "$C_FAILURE" "$PS_SYMBOL" "$RESET")
  fi

  # Define shell specific syntax for user/host/dir
  if [ "$ZSH_VERSION" ]; then
    user="%n"
    host="%m"
    workdir="%~"
  else
    user="\u" #Ref: https://unix.stackexchange.com/questions/429433/using-printf-when-string-has-backslash
    host="\h"
    workdir="\w"
  fi

  # DEFINE: User@host:workingdir entry, colorized
  PS1_USER=$(printf '%s%s%s%s' "$C_BOLD" "$C_LGREEN" "$user" "$RESET")
  PS1_HOST=$(printf '%s%s%s%s' "$C_BOLD" "$C_LGREEN" "$host" "$RESET")
  PS1_WORKDIR=$(printf '%s%s%s%s' "$C_BOLD" "$C_LBLUE" "$workdir" "$RESET")

  # DEFINE: Title (if xterm/rxvt/others?)
  case "$TERM" in
  	xterm*|rxvt*) PS1_TITLE=$(printf '\[\e]0;%s@\h:\w\a\]' "$user");;
  	*) ;;
  esac

  PS1_GIT="$RESET$(git_prompt)$RESET"

  if [ "$ZSH_VERSION" ]; then
    #shellcheck disable=2034 # Exception: Ignore unused var warning, PROMPT is picked up by zsh
    PROMPT="$PS1_USER @ $PS1_HOST:$PS1_WORKDIR$PS1_GIT $SHELL_SYMBOL "
  else
    PS1="$PS1_TITLE$PS1_USER @ $PS1_HOST:$PS1_WORKDIR$PS1_GIT $SHELL_SYMBOL "
  fi

  #Add local folder node_modules to path if exist
  if [ -d "$PWD/node_modules/.bin" ]; then
    pathadd "$PWD/node_modules/.bin" after;
  fi
}

#Execute the prompt (since its not directly assigned)
if [ "${BASH_VERSION}" ]; then
  # Wider compatibility with OSX Terminal (vs directly assigning PS1)
  ##ref: https://github.com/riobard/bash-powerline/issues/14#issuecomment-311846617
  PROMPT_COMMAND="__ps1_prompt_command${PROMPT_COMMAND:+; $PROMPT_COMMAND}"
elif [ "${ZSH_VERSION}" ]; then
  ##ref: https://superuser.com/questions/735660/whats-the-zsh-equivalent-of-bashs-prompt-command
  precmd() { __ps1_prompt_command; }
else
  # Run the prompt on all other shells
  __ps1_prompt_command
fi
