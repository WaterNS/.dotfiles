#!/bin/bash

# Source prompt colors/symbols
if [ -f ~/.dotfiles/bash/_promptcolors ];then
	. ~/.dotfiles/bash/_promptcolors
fi

git_prompt() {

hash git 2>/dev/null || return # git not found

local git_eng="env LANG=C git"   # force git output in English to make our work easier

# get current branch name
local ref=$($git_eng symbolic-ref --short HEAD 2>/dev/null)

# Check if branch or use tag/SHA
if [[ -n "$ref" ]]; then
	# prepend branch symbol
	ref="$SYMBOL_GIT_BRANCH $ref"
else
  # get tag name or short unique hash
	ref=$($git_eng describe --tags --always 2>/dev/null)
fi

[[ -n "$ref" ]] || return  # not a git repo

#Identify stashes
stashes=$(git stash list 2>/dev/null)
if [[ -n "$stashes" ]]; then
	git_stashed_count=`printf "$stashes" | grep -c ^`
else 
	git_stashed_count=0
fi

#Parse `git status --porcelain --branch` output
git_untracked_count=0
git_added_count=0
git_modified_count=0
git_deleted_count=0
while IFS= read -r line; do
	if [[ $line =~ ^'##' ]]; then # header line
		
		#Identify number of commits ahead
		if [[ $line =~ ahead\ ([0-9]+) ]]; then 
			marks+=" $SYMBOL_GIT_PUSH"
			#style number as GREEN
			marks+="\e[32m";marks+="${BASH_REMATCH[1]}";marks+="\e[m"
		fi
		
		#Identify number of commits behind
		if [[ $line =~ behind\ ([0-9]+) ]]; then
			marks+=" $SYMBOL_GIT_PULL"
			#style number as YELLOW
			marks+="\e[33m";marks+="${BASH_REMATCH[1]}";marks+="\e[m"
		fi

	#Identify modified files
	elif [[ $line =~ ^[[:blank:]]'A'[[:blank:]] ]]; then
		git_added_count=$((git_added_count + 1))

	#Identify modified files
	elif [[ $line =~ ^[[:blank:]]'M'[[:blank:]] ]]; then
		git_modified_count=$((git_modified_count + 1))

	#Identify deleted files
	elif [[ $line =~ ^[[:blank:]]'D'[[:blank:]] ]]; then
		git_deleted_count=$((git_deleted_count + 1))

	#Identify untracked files
	elif [[ $line =~ ^'??'[[:blank:]] ]]; then
		git_untracked_count=$((git_untracked_count + 1))
	
	fi

done < <($git_eng status --porcelain --branch 2>/dev/null)  # note the space between the two <

if [ "$git_added_count" -gt 0 ]; then
	marks+=" \e[97m";marks+="a:";marks+="\e[m"
	# style count as LIGHT GREEN
	marks+="\e[92m";marks+="$git_added_count";marks+="\e[m"
fi
if [ "$git_modified_count" -gt 0 ]; then
	marks+=" \e[97m";marks+="m:";marks+="\e[m"
	# style count as LIGHT YELLOW
	marks+="\e[93m";marks+="$git_modified_count";marks+="\e[m"
fi
if [ "$git_deleted_count" -gt 0 ]; then
	marks+=" \e[97m";marks+="d:";marks+="\e[m"
	# style count as LIGHT RED
	marks+="\e[91\1m";marks+="$git_deleted_count";marks+="\e[m"
fi

if [ "$git_untracked_count" -gt 0 ] || [ "$git_stashed_count" -gt 0 ]; then
	marks+=" |"
fi
if [ "$git_untracked_count" -gt 0 ]; then
	marks+=" \e[97m";marks+="untracked:";marks+="\e[m"
	# style count as LIGHT RED
	marks+="\e[91\1m";marks+="$git_untracked_count";marks+="\e[m"
fi
if [ "$git_stashed_count" -gt 0 ]; then
	marks+=" \e[97m";marks+="stashes:";marks+="\e[m"
	# style count as LIGHT YELLOW
	marks+="\e[93\1m";marks+="$git_stashed_count";marks+="\e[m"
fi


# print the git branch segment without a trailing newline
printf " [ $ref$marks ]"
}
