#!/bin/bash

#seconds2time function
seconds2time ()
{
   T=$1
   D=$((T/60/60/24))
   H=$((T/60/60%24))
   M=$((T/60%60))
   S=$((T%60))

#Print the days, if any
if [ $D -gt 0 ]; then
  printf '%d day' $D; if [ $D -gt 1 ]; then printf 's'; fi
fi

#Print the hours, if any
if [ $H -gt 0 ]; then
  if [ $D -gt 0 ]; then printf ', '; fi
  printf '%d hour' $H; if [ $H -gt 1 ]; then printf 's'; fi
fi

#Print the minutes, if any
if [ $M -gt 0 ]; then
  if [ $H -gt 0 ] || [ $D -gt 0 ]; then printf ', '; fi
  printf '%d minute' $M; if [ $M -gt 1 ]; then printf 's'; fi
fi

#Print the seconds, if any
if [ $S -gt 0 ]; then
  if [ $M -gt 0 ] || [ $H -gt 0 ] || [ $D -gt 0 ]; then printf ', '; fi
  printf '%d second' $S; if [ $S -gt 1 ]; then printf 's'; fi
fi

#Print '0 seconds' if no time provided or time is 0
if [[ -z "${T// }" ]]; then
	printf '0 seconds'
elif [[ $T -eq 0 ]]; then
	printf '0 seconds'
fi
}

fixsshperms ()
{
  if [ -d ~/.ssh ]; then
    chmod 700 ~/.ssh
    chmod 644 ~/.ssh/*.pub
    find ~/.ssh -type f -iname "id*" -not -path "*.pub" -print0 | xargs -0 chmod 600
  fi
}

foldertotal() {
#Function to calculate total of directory of receipts
# eg. "2019-01-01 Amazon - Books - $104.51"
#         +
#     "2019-01-01 Bestbuy - Movies - $50.13"
local location="$1"
echo "Calculating totals for: $location"

array=()
while IFS=  read -r -d $'\0'; do
  filename=$(echo "$REPLY" | xargs -0 basename)
  filenameNoExt="${filename%.*}"

  if [[ $filenameNoExt == *'$'* ]];then
    if [[ $filenameNoExt =~ -?\$[0-9]+([.][0-9]+)?$ ]] ;then
      array+=("${BASH_REMATCH[0]//$/}")
    else
      echo "Not amount: $filename"
    fi
  fi
done < <(find "$location" -type f -not -path "*DS_Store*" -print0)

#Ref: https://stackoverflow.com/questions/13635293/unix-shell-script-adding-the-elements-of-an-array-together
dc <<< '[+]sa[z2!>az2!>b]sb'"${array[*]//-/_}lbxp"
}

if [[ $OSTYPE == darwin* ]]; then
  rootpid() {
    # Look up the parent of the given PID.
    PID=${1:-$$}
    PARENT=$(ps -p "$PID" -o ppid=)

    # /sbin/init always has a PID of 1, so if you reach that, the current PID is
    # the top-level parent. Otherwise, keep looking.
    if [[ ${PARENT} -eq 1 ]] ; then
        echo "${PID}"
    else
        rootpid "${PARENT}"
    fi
  }
  whatcalledbash=$(ps -p "$(rootpid)" -o args | awk 'NR>1')
  if [[ "$whatcalledbash" == *"Terminal.app"* ]]; then
    export IN_TERMINAL_APP=true
  fi
fi