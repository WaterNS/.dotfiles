#!/bin/bash

# Source prompt functions
# shellcheck disable=SC1090 #see https://github.com/koalaman/shellcheck/issues/769
if [ -f "$HOME/.dotfiles/bash/_promptfunctions" ];then
	. "$HOME/.dotfiles/bash/_promptfunctions"
fi


ps1function() {
local PrevCmdExitCode=$?

# DEFINE: Last Exit code: get and set colors
if [ "$PrevCmdExitCode" -eq 0 ]; then
	local symbol="$COLOR_SUCCESS $PS_SYMBOL $RESET"
else
	local symbol="$COLOR_FAILURE $PS_SYMBOL $RESET"
fi

# DEFINE: Title (if xterm/rxvt/others?)
case "$TERM" in
	xterm*|rxvt*) local windowtitle="\[\e]0;\u@\h: \w\a\]" ;;
	*) ;;
esac

# DEFINE: User@host entry
local user='\[\033[01;32m\]\u\[\033[00m\]'
local host='\[\033[01;32m\]\h\[\033[00m\]'
# DEFINE: Location
local location='\[\033[01;34m\]\w\[\033[00m\]'

# DEFINE: Git Prompt
	# security fix: don't run a script that happens to be same name as the branch
	if shopt -q promptvars; then
		#shellcheck disable=2034 # Exception: indirect reference
		_git_prompt="$(git_prompt)"
		local git
		git="$RESET$BG_GIT\${_git_prompt}$RESET"
	else
		# promptvars is disabled. Avoid creating unnecessary env var.
		local git
		git="$RESET$BG_GIT$(git_prompt)$RESET"
	fi

# Put it all together!
PS1="\
$windowtitle\
$user $RESET@$RESET $host:\
$location\
$git\
$symbol"
}

#Set the PROMPT_COMMAND, but don't overwrite existing ones
#ref: https://github.com/riobard/bash-powerline/issues/14#issuecomment-311846617
PROMPT_COMMAND="ps1function${PROMPT_COMMAND:+; $PROMPT_COMMAND}"
